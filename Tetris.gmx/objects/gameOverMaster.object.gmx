<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loads the leaderboard file
if file_exists("tetrisDatabase.dat") {leaderboard = ds_map_secure_load("tetrisDatabase.dat")}
else {
    leaderboard = ds_map_create()
    sortedBoard = sortLeaderboard(leaderboard)
    ds_map_secure_save(leaderboard, "tetrisDatabase.dat")
}
drawBoard = false
if POINTS != 0 {nameMessage = get_string_async("What's your name?", "Enter name here");}
else {drawBoard = true; sortedBoard = sortLeaderboard(leaderboard)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Getting player's name 
//Saves to the leaderboard map
var messageID = ds_map_find_value(async_load, "id"), playerName, playerStat = ds_map_create();
if messageID == nameMessage {
   if ds_map_find_value(async_load, "status") {
      if ds_map_find_value(async_load, "result") != "" {playerName = ds_map_find_value(async_load, "result");}
      else playerName = "Guest"
   }
   else {playerName = "Guest"}
}

ds_map_add(playerStat, playerName, POINTS)
ds_map_add_map(leaderboard, ds_map_size(leaderboard) + 1, playerStat)
ds_map_secure_save(leaderboard, "tetrisDatabase.dat")
sortedBoard = sortLeaderboard(leaderboard)
drawBoard = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws leaderboard
// Drawing people's stats
if drawBoard {
    // Return button
    draw_set_alpha(0.35)
    draw_rectangle_colour(178, 669.5, 478, 769.5, c_white, c_white, c_white, c_white, false)
    draw_set_alpha(1)
    draw_set_colour(c_white)
    if buttonPressed(178, 669.5, 478, 769.5) {ds_list_destroy(sortedBoard); room_goto(Lobby);} 
    if buttonHover(178, 669.5, 478, 769.5){draw_set_alpha(0.35); draw_rectangle_colour(178, 669.5, 478, 769.5, c_black, c_black, c_black, c_black, false); draw_set_alpha(1); draw_rectangle_colour(178, 769.5, 478, 774.5, STORM_BLUE, STORM_BLUE, STORM_BLUE, STORM_BLUE, false)}
    else {draw_rectangle_colour(178, 769.5, 478, 774.5, c_white, c_white, c_white, c_white, false)}
    draw_set_colour(c_black)
    draw_set_font(ImpactLarge)
    draw_text(10, 0, "Rankings")
    draw_text(225, 670, "Return")
    if ds_exists(sortedBoard, ds_type_list){
        for (index = 0; index &lt; 10; index ++) {
            currentMap = ds_list_find_value(sortedBoard, index)
            draw_rectangle(0, 150 + 50 * index, 50, 100 + 50 * index, true)
            draw_rectangle(50, 150 + 50 * index, 500, 100 + 50 * index, true)
            draw_rectangle(500, 150 + 50 * index, 655, 100 + 50 * index, true)
            draw_set_font(Impact)
            draw_text(20, 115 + 50 * index, string(index + 1))
            if !is_undefined(currentMap) {
                draw_text(55, 115 + 50 * index, ds_map_find_first(currentMap))
                draw_text(505, 115 + 50 * index, string(ds_map_find_value(currentMap, ds_map_find_first(currentMap))))
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
