<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Making minos

var baseArray, baseArrayRow, baseArrayColumn, iMinoRow, iMinoColumn, oMinoRow, oMinoColumn, iMino, oMino, tMino, zMino, sMino, lMino, jMino;
// Making the baseArray -- Process of building the other minos
for (baseArrayRow = 0; baseArrayRow &lt; 3; baseArrayRow ++) {
    for (baseArrayColumn = 0; baseArrayColumn &lt; 3; baseArrayColumn ++) {
        baseArray[baseArrayRow, baseArrayColumn] = 0
    }
}
// Making iMino 
for (iMinoRow = 0; iMinoRow &lt; 4; iMinoRow ++) {
    for (iMinoColumn = 0; iMinoColumn &lt; 4; iMinoColumn ++) {
        if iMinoRow == 1 
            iMino[iMinoRow, iMinoColumn] = 1
        else
            iMino[iMinoRow, iMinoColumn] = 0
    }
}

// Making oMino
for (oMinoRow = 0; oMinoRow &lt; 2; oMinoRow ++) {
    for (oMinoColumn = 0; oMinoColumn &lt; 2; oMinoColumn ++) {
        oMino[oMinoRow, oMinoColumn] = 2
    }
}

// Making tMino
tMino = baseArray
tMino[0, 1] = 3
tMino[1, 0] = 3
tMino[1, 1] = 3
tMino[1, 2] = 3

// Making zMino
zMino = baseArray
zMino[1, 0] = 4
zMino[1, 1] = 4
zMino[0, 1] = 4
zMino[0, 2] = 4

// Making sMino
sMino = baseArray
sMino[0, 0] = 5
sMino[0, 1] = 5
sMino[1, 1] = 5
sMino[1, 2] = 5

//Making lMino
lMino = baseArray
lMino[1, 0] = 6
lMino[1, 1] = 6
lMino[1, 2] = 6
lMino[0, 2] = 6

//Making jMino
jMino = baseArray
jMino[0, 0] = 7
jMino[1, 0] = 7
jMino[1, 1] = 7
jMino[1, 2] = 7

globalvar PIECES;
PIECES[0] = iMino
PIECES[1] = oMino
PIECES[2] = tMino
PIECES[3] = zMino
PIECES[4] = sMino
PIECES[5] = lMino
PIECES[6] = jMino



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Making variables
globalvar COLORS;
COLORS[1] = c_aqua
COLORS[2] = c_yellow
COLORS[3] = c_purple
COLORS[4] = c_lime
COLORS[5] = c_red
COLORS[6] = c_orange
COLORS[7] = c_navy
globalvar POINTS; 
POINTS = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Lobby Gui
//Drawing the buttons
draw_set_alpha(0.35)
draw_rectangle_colour(30, 400, 280, 500, c_white, c_white, c_white, c_white, false)
draw_rectangle_colour(30, 515, 330, 615, c_white, c_white, c_white, c_white, false)
draw_set_alpha(1)
// Play Button
if buttonPressed(30, 400, 280, 500) {room_goto(GameRoom);} 
if buttonHover(30, 400, 280, 500){draw_set_alpha(0.5); draw_rectangle_colour(30, 400, 280, 500, c_black, c_black, c_black, c_black, false); draw_set_alpha(1); draw_rectangle_colour(30, 500, 280, 505, STORM_BLUE, STORM_BLUE, STORM_BLUE, STORM_BLUE, false)} //draw_set_alpha(0.35); draw_rectangle_colour(30, 400, 280, 500, STORM_BLUE, STORM_BLUE, STORM_BLUE, STORM_BLUE, false); draw_set_alpha(1); 
else {draw_set_alpha(0.35); draw_rectangle_colour(30, 400, 280, 500, c_white, c_white, c_white, c_white, false); draw_set_alpha(1); draw_rectangle_colour(30, 500, 280, 505, c_white, c_white, c_white, c_white, false);}
// Leaderboard Button
if buttonPressed(30, 515, 330, 615) {room_goto(GameOver)} 
if buttonHover(30, 515, 330, 615){draw_set_alpha(0.5); draw_rectangle_colour(30, 515, 330, 615, c_black, c_black, c_black, c_black, false); draw_set_alpha(1); draw_rectangle_colour(30, 615, 330, 620, STORM_BLUE, STORM_BLUE, STORM_BLUE, STORM_BLUE, false)} //draw_set_alpha(0.35); draw_rectangle_colour(30, 515, 330, 615, STORM_BLUE, STORM_BLUE, STORM_BLUE, STORM_BLUE, false); draw_set_alpha(1); 
else {draw_set_alpha(0.35); draw_rectangle_colour(30, 515, 330, 615, c_white, c_white, c_white, c_white, false); draw_set_alpha(1); draw_rectangle_colour(30, 615, 330, 620, c_white, c_white, c_white, c_white, false) }
// Drawing text
draw_set_font(ImpactLarge)
draw_set_colour(c_black)
draw_text(40, 410, "Play")
draw_text(40, 525, "Rankings")
draw_set_colour(c_white)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
